[{"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/index.js":"1","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/App.js":"2","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/reportWebVitals.js":"3","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/login_signup/login/Login.js":"4","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/Chat.js":"5","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/login_signup/signup/Signup.js":"6","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/Chat_window.js":"7","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/login_signup/signup/InputField.js":"8","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/UserList.js":"9","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/Message.js":"10","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/User_preview.js":"11"},{"size":547,"mtime":1687356156407,"results":"12","hashOfConfig":"13"},{"size":994,"mtime":1687356156406,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":1687356156408,"results":"15","hashOfConfig":"13"},{"size":4598,"mtime":1687426741000,"results":"16","hashOfConfig":"13"},{"size":14893,"mtime":1687687747281,"results":"17","hashOfConfig":"13"},{"size":11373,"mtime":1687356156407,"results":"18","hashOfConfig":"13"},{"size":335,"mtime":1687356156406,"results":"19","hashOfConfig":"13"},{"size":1893,"mtime":1687356156407,"results":"20","hashOfConfig":"13"},{"size":644,"mtime":1687356156406,"results":"21","hashOfConfig":"13"},{"size":425,"mtime":1687356156406,"results":"22","hashOfConfig":"13"},{"size":1139,"mtime":1687356156406,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vbxkmx",{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/index.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/App.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/reportWebVitals.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/login_signup/login/Login.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/Chat.js",["60","61","62","63","64"],[],"// css\nimport '../css/chat_main.css';\nimport '../css/chat_user.css';\nimport '../css/chat_window.css';\n\n// // javascript\nimport {Chat_window} from \"./Chat_window.js\";\nimport {useEffect, useRef, useState} from \"react\";\nimport UserList from \"./UserList\"\nimport {useNavigate} from 'react-router-dom'\nimport {token} from '../login_signup/login/Login';\n\nimport Button from 'react-bootstrap/Button';\nimport Modal from 'react-bootstrap/Modal';\nimport Form from 'react-bootstrap/Form';\nimport {socket} from '../App.js';\n\nexport var name_picture = {\n    _displayname:\"\",\n    _profilePicture:\"\",\n    _userName:\"\",\n    set displayname(value) {\n        this._displayname = value;\n    },\n    get displayname() {\n        return this._displayname;\n    },\n    set profilePicture(value) {\n        this._profilePicture = value;\n    },\n    get profilePicture() {\n        return this._profilePicture;\n    },\n    set userName(value) {\n        this._userName = value;\n    },\n    get userName() {\n        return this._userName;\n    }\n}\n\nlet activeUser = null;\nlet activeId = null;\nfunction Chat({setLoggedIn}) {\n    const [currentUser, setCurrentUser] = useState(\"\");\n    const [currentMessages, setCurrentMessages] = useState([]);\n    const inputRef = useRef(\"\");\n    const [addUserErrorText, setAddUserErrorText] = useState(\"\");\n    const [show, setShow] = useState(false);\n    const [invalid, setInvalid] = useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    //const [stateArray, setStateArray] = useState({\"Daniel\":{time:1, lastMsg:\"prrr\", active:\"active\"}});\n\n    const [stateArray, setStateArray] = useState(null); // user list at left side of screen.\n    useEffect(()=> { // when component mounts\n        activeUser=null;\n        activeId=null;\n        getUserChatsFromServer().then(setStateArray);\n    },[])\n    const addRef = useRef(\"\")\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        socket.on(\"receive_message\", (data) => {\n            console.log(activeUser);\n            console.log(activeId);\n            getUserChatsFromServer().then(setStateArray);\n            if (activeId !== null) {\n                upd();\n            }\n        })\n    }, [socket]);\n\n    function currTime() {\n        var today = new Date();\n        return today.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n    }\n    function adaptFormat(obj) {\n        // change the object given from server from chats, to syntax needed to stateArray\n        var ObjectToStateArray = {};\n        for(const user of obj) {\n            var LASTMSGID;\n            var TIME;\n            var CONTENT;\n            if(!user.lastMessage) {\n                LASTMSGID=-1;\n                TIME=\"\";\n                CONTENT=\"\";\n            } else {\n                LASTMSGID=user.lastMessage.id;\n                TIME=user.lastMessage.created;\n                const datetime = new Date(TIME);\n                // Extracting the time\n                const time = datetime.toLocaleTimeString([], { hour: \"2-digit\", minute: \"2-digit\" });\n\n                // Extracting the date\n                const date = datetime.toLocaleDateString();\n                TIME = time + \" \" + date;\n                CONTENT=user.lastMessage.content;\n            }\n            if (user.user.username !== activeUser) {\n                ObjectToStateArray[user.user.username] = {\n                    displayName: user.user.displayName, profilePic: user.user.profilePic, lastMsg: CONTENT,\n                    lastMsgId: LASTMSGID, time: TIME, active: \"inactive\", chatId: user.id\n                }\n            } else {\n                ObjectToStateArray[user.user.username] = {\n                    displayName: user.user.displayName, profilePic: user.user.profilePic, lastMsg: CONTENT,\n                    lastMsgId: LASTMSGID, time: TIME, active: \"active\", chatId: user.id\n                }\n            }\n        }\n        return ObjectToStateArray;\n    }\n    async function getUserChatsFromServer() {\n        const res = await fetch('http://localhost:5000/api/Chats', {\n            'method':'get',\n            'headers' : {\n                'Content-Type': 'application/json',\n                'authorization' : \"bearer \" + token,\n            }\n        });\n        var j = await res.json();\n        return adaptFormat(j);\n    }\n    async function SendMsg() {\n        var msg = inputRef.current.value.trim();\n        if (msg === \"\"){\n            return;\n        }\n        // show the message on screen\n        setCurrentMessages([...currentMessages, {content:msg,sender:\"You\"}])\n        const data = {\n            msg:msg\n        }\n        const id = stateArray[currentUser].chatId.toString();\n        const res = await fetch('http://localhost:5000/api/Chats/'+id+'/Messages', {\n            'method':'post',\n            'headers':{\n                'Content-Type': 'application/json',\n                'authorization' : \"bearer \" + token,\n            },\n            'body':JSON.stringify(data)\n        })\n        setStateArray({...stateArray, [currentUser]: {...stateArray[currentUser], lastMsg:msg, time:currTime()}})\n        inputRef.current.value=\"\";\n        socket.emit(\"send_message\", {chat_id: activeId, socket: socket.id, username: currentUser, message: msg});\n\n    }\n    // return false\n\n\n    async function AddUser() {\n        var user = addRef.current.value // username\n        if(user in stateArray){\n            setInvalid(true);\n            setAddUserErrorText(\"Can't chat with user more than once.\")\n            return;\n        }\n        const data = {\n            username:user\n        }\n        const res2 = await fetch('http://localhost:5000/api/Chats', {\n            'method':'post',\n            'headers' : {\n                'Content-Type': 'application/json',\n                'authorization' : \"bearer \" + token,\n            },\n            'body' : JSON.stringify(data)\n        });\n        console.log(res2.status);\n        if(res2.status!==200) {\n            setInvalid(true);\n            setAddUserErrorText(\"Invalid user to add.\")\n            return;\n        }\n        const json2 = await res2.json(); // result should have the info on the requested user in data.\n        /*\n        * The response looks like this:\n        * {\n          \"id\": 2,\n          \"user\": {\n            \"username\": \"bob\",\n            \"displayName\": \"BOB\",\n            \"profilePic\": \"string\"\n          }\n            }\n            * */\n        var dictToAdd = {\n            time: \"\", lastMsg: \"\", active: \"active\",displayName:json2.user.displayName,\n            profilePic:json2.user.profilePic,lastMsgId:-1,chatId:json2.id\n        }\n        if(currentUser!==\"\") {\n            setStateArray({\n                ...stateArray, [currentUser]: {...stateArray[currentUser], active: \"inactive\"},\n                [user]: dictToAdd\n            });\n        } else {\n            setStateArray({\n                ...stateArray,\n                [user]: dictToAdd\n            });\n        }\n        setCurrentMessages(oldArray=>[]);\n        setCurrentUser(user);\n        setShow(false);\n        activeId = dictToAdd.chatId;\n        activeUser = user;\n        socket.emit(\"send_message\", {chat_id: 0, socket: socket.id, username: user, message: \"new chat\"});\n    }\n    async function upd(){\n        const res = await fetch('http://localhost:5000/api/Chats/' + activeId + '/Messages', {\n            'method': 'get',\n            'headers': {\n                'Content-Type': 'application/json',\n                'authorization': \"bearer \" + token,\n            }\n        })\n        const messagesNew = [];\n        const messageList = await res.json();\n        const reversedMessageList = messageList.reverse();\n        for (const message of reversedMessageList) { // reverse because of the way the server saves the messages\n            var sender = \"\"\n            if (message.sender.username === name_picture.userName) {\n                sender = \"You\"\n            } else {\n                sender = \"Other\"\n            }\n            messagesNew.push({content: message.content, sender: sender})\n        }\n        setCurrentMessages(oldArray => messagesNew);\n    }\n    async function switchUsers(username, update = 0, _stateArray = null) {\n        activeUser = username;\n        let res;\n        if (update === 1) {\n            res = await fetch('http://localhost:5000/api/Chats/' + activeId + '/Messages', {\n                'method': 'get',\n                'headers': {\n                    'Content-Type': 'application/json',\n                    'authorization': \"bearer \" + token,\n                }\n            })\n        } else {\n            if (currentUser !== \"\") {\n                setStateArray({\n                    ...stateArray, [currentUser]: {...stateArray[currentUser], active: \"inactive\"},\n                    [username]: {...stateArray[username], active: \"active\"}\n                });\n            } else {\n                setStateArray({\n                    ...stateArray,\n                    [username]: {...stateArray[username], active: \"active\"}\n                });\n            }\n            const id = stateArray[username].chatId.toString();\n            activeId = id;\n            res = await fetch('http://localhost:5000/api/Chats/' + id + '/Messages', {\n                'method': 'get',\n                'headers': {\n                    'Content-Type': 'application/json',\n                    'authorization': \"bearer \" + token,\n                }\n            })\n\n        }\n        const messagesNew = [];\n        const messageList = await res.json();\n        const reversedMessageList = messageList.reverse();\n        for (const message of reversedMessageList) { // reverse because of the way the server saves the messages\n            var sender = \"\"\n            if (message.sender.username === name_picture.userName) {\n                sender = \"You\"\n            } else {\n                sender = \"Other\"\n            }\n            messagesNew.push({content: message.content, sender: sender})\n        }\n        setCurrentMessages(oldArray => messagesNew);\n        setCurrentUser(username);\n    }\n\n    async function keydownSendMsg(event){\n        if(event.key === \"Enter\") {\n            event.preventDefault();\n            await SendMsg();\n        }\n    }\n    async function keydownAddUser(event) {\n        if(event.key === \"Enter\") {\n            event.preventDefault();\n            await AddUser();\n        }\n    }\n    function logOut() {\n        setLoggedIn(false);\n        navigate('/login',{replace:true});\n    }\n    return (\n        <>\n            <title>Chat</title>\n            <link href=\"../css/chat_main.css\" rel=\"stylesheet\"/>\n            <link href=\"../css/chat_user.css\" rel=\"stylesheet\"/>\n            <link href=\"../css/chat_window.css\" rel=\"stylesheet\"/>\n            <div className=\"chat-container\">\n                <div className=\"user-list-container\">\n                    <div className=\"profile-container\">\n                        <div className=\"profile-picture\">\n                            <img\n                                src={`data:image/jpeg;charset=utf-8;base64,${name_picture.profilePicture}`}\n                                className=\"rounded-circle\" alt=\"Profile Picture\"/>\n                        </div>\n\n                        <div className=\"profile-username\">\n                            {name_picture.displayname}\n                        </div>\n\n                        <div className=\"add-user\" onClick={handleShow}>\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\"\n                                 className=\"bi bi-person-add\" viewBox=\"0 0 16 16\">\n                                <path\n                                    d=\"M12.5 16a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7Zm.5-5v1h1a.5.5 0 0 1 0 1h-1v1a.5.5 0 0 1-1 0v-1h-1a.5.5 0 0 1 0-1h1v-1a.5.5 0 0 1 1 0Zm-2-6a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\"/>\n                                <path\n                                    d=\"M8.256 14a4.474 4.474 0 0 1-.229-1.004H3c.001-.246.154-.986.832-1.664C4.484 10.68 5.711 10 8 10c.26 0 .507.009.74.025.226-.341.496-.65.804-.918C9.077 9.038 8.564 9 8 9c-5 0-6 3-6 4s1 1 1 1h5.256Z\"/>\n                            </svg>\n                        </div>\n                    </div>\n                    <h2>Users</h2>\n                    <UserList stateArray={stateArray} clicker={switchUsers}/>\n                </div>\n\n                <button className=\"btn btn-danger log-out-button\" onClick={logOut}>Log out</button>\n\n                <div className=\"chat-window-container\">\n                    <div className=\"chat-header\">\n                        <div className=\"user-container\">\n                            <div className=\"chat-profile-picture\">\n                            </div>\n                            <div className=\"friend-username\">\n                            </div>\n                        </div>\n                    </div>\n                    <Chat_window  messagesContent={currentMessages}\n                    ></Chat_window>\n                    {(currentUser!==\"\") && (<form id=\"chat-area\">\n                        <input ref={inputRef} rows=\"1\" name=\"text\" id=\"messageBar\"\n                               placeholder=\"Type your message here...\" onKeyDown={keydownSendMsg} />\n                        <button type=\"button\" className=\"btn btn-primary\" id=\"msg\" onClick={SendMsg}>Send</button>\n                    </form>)}\n\n\n\n                </div>\n            </div>\n            <Modal show={show} onHide={handleClose}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Add User</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form>\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label htmlFor=\"recipient-name\" className=\"col-form-label\">Contact name:</Form.Label>\n                            <Form.Group className=\"input-group\">\n                                <div className=\"input-group-text\">@</div>\n                                <Form.Control type=\"text\" className=\"form-control\" id=\"recipient-name\" ref={addRef}\n                                              isInvalid = {invalid} onKeyDown={keydownAddUser} />\n                                <Form.Control.Feedback type=\"invalid\">{addUserErrorText}</Form.Control.Feedback>\n                            </Form.Group>\n                        </Form.Group>\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"primary\" onClick={AddUser}>\n                        Save Changes\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </>\n\n    );\n}\n\nexport default Chat;\n","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/login_signup/signup/Signup.js",["65","66","67"],[],"import '../login_signup.css'\nimport {Link, useNavigate} from 'react-router-dom'\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\"\nimport {useState} from \"react\";\nimport InputField from './InputField.js'\n\nfunction Signup() {\n    const [errors, setErrors] = useState({\n        username: {message: '', invalid: 2},\n        password1: {message: '', invalid: 2},\n        password2: {message: '', invalid: 2},\n        displayname: {message: '', invalid: 2},\n        file: {message: '', invalid: 2},\n    });\n    // 0 = valid, 1 = invalid - display message, 2= empty, do nothing.\n    const [pic, setPic] = useState('')\n    //const reader = new FileReader();\n    const [realPic, setRealPic] = useState(null);\n    const defaultProfilePicture = \"https://images-na.ssl-images-amazon.com/images/I/51e6kpkyuIL._AC_SX466_.jpg\";\n    const navigate = useNavigate();\n    function checkPassword(event) {\n        let password = event.target.value;\n        // if(password===''){\n        //     setErrors({...errors,password1:{message:'', invalid:1}});\n        //     return;\n        // }\n        if (password.length < 6) {\n\n            setErrors({\n                ...errors, password1: {\n                    message: 'Password length must contain a minimum of 6 characters',\n                    invalid: 1\n                }\n            });\n\n            return;\n        }\n\n        // to check space\n        if (password.indexOf(\" \") !== -1) {\n            //setError(\"Password can't contain spaces.\");\n            setErrors({\n                ...errors, password1: {\n                    message: \"Password can't contain spaces.\",\n                    invalid: 1\n                }\n            });\n            return;\n        }\n\n        // for digits from 0 to 9\n        let count = 0;\n        for (let i = 0; i <= 9; i++) {\n            if (password.indexOf(i) !== -1) {\n                count = 1;\n            }\n        }\n        if (count === 0) {\n            //setError(\"Password must contain at least one digit.\");\n            setErrors({\n                ...errors, password1: {\n                    message: \"Password must contain at least one digit.\",\n                    invalid: 1\n                }\n            });\n            return;\n        }\n\n        // for special characters\n        if (!/[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]/.test(password)) {\n            //setError(\"Password must contain at least one special characters.\");\n            setErrors({\n                ...errors, password1: {\n                    message: \"Password must contain at least one special characters.\",\n                    invalid: 1\n                }\n            });\n            return;\n        }\n\n        // for capital letters\n        count = 0;\n        for (let i = 65; i <= 90; i++) {\n            if (password.indexOf(String.fromCharCode(i)) !== -1) {\n                count = 1;\n            }\n        }\n        if (count === 0) {\n            //setError(\"Password must contain uppercase characters.\");\n            setErrors({\n                ...errors, password1: {\n                    message: \"Password must contain uppercase characters.\",\n                    invalid: 1\n                }\n            });\n            return;\n        }\n\n        // for small letters\n        count = 0;\n        for (let i = 97; i <= 122; i++) {\n            if (password.indexOf(String.fromCharCode(i)) !== -1) {\n                count = 1;\n            }\n        }\n        if (count === 0) {\n            //setError(\"Password must contain lowercase characters.\");\n            setErrors({\n                ...errors, password1: {\n                    message: \"Password must contain lowercase characters.\",\n                    invalid: 1\n                }\n            });\n            return;\n        }\n        setErrors({...errors, password1: {message: '', invalid: 0}});\n        // if all conditions fail we don't change anything\n\n    }\n    function changeFromEmpty(event) {\n        let name = event.target.name;\n        if(event.target.value!=='') {\n            setErrors({...errors, [name]: {message: '', invalid: 0}});\n        } else {\n            setErrors({...errors, [name]: {message: '', invalid: 2}});\n\n        }\n    }\n\n    function showPic(event) {\n        let file = event.target.files[0];\n        setRealPic(file);\n        if (file) {\n            setPic(URL.createObjectURL(event.target.files[0]))\n        } else {\n            setPic('')\n        }\n    }\n\n    function checkAllValids() {\n        for (const property in errors) {\n            if (errors[property].invalid === 1)\n                return false;\n        }\n        return true;\n    }\n\n    function checkEmpty(username, password1, password2, displayname) {\n        let empty = false;\n        if (username === '') {\n            setErrors((errors) => ({...errors, username: {message: \"Must input username.\", invalid: 1}}))\n            empty = true;\n        }\n        if (password1 === '') {\n            // setErrors({...errors, password1: {message: \"Must input password.\", invalid: 1}})\n            setErrors((errors) => ({\n                ...errors,\n                password1: {message: \"Must input password.\", invalid: 1}\n            }))\n\n            empty = true;\n\n        }\n        if (password2 === '') {\n            // setErrors({...errors, password2: {message: \"Must input password verification.\", invalid: 1}})\n            setErrors((errors) => ({\n                ...errors,\n                password2: {message: \"Must input password verification.\", invalid: 1}\n            }))\n\n            empty = true;\n\n        }\n        if (displayname === '') {\n            // setErrors({...errors, displayname: {message: \"Must input display name.\", invalid: 1}})\n            setErrors((errors) => ({\n                ...errors,\n                displayname: {message: \"Must input display name.\", invalid: 1}\n            }))\n\n            empty = true;\n\n        }\n        // console.log(empty);\n        return empty;\n\n    }\n    function getBase64() {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n\n            reader.onloadend = () => {\n                resolve(reader.result);\n            };\n\n            reader.onerror = reject;\n\n            reader.readAsDataURL(new Blob([realPic]));\n        });\n    }\n    function isValid(username, password1, password2, displayname) {\n        if (checkEmpty(username, password1, password2, displayname)) {\n            return false;\n        }\n        if (!checkAllValids()) {\n            return false;\n        }\n        if (password1 !== password2) {\n            setErrors({...errors, password2: {message: \"Doesn't match first password input.\", invalid: 1}});\n            return false;\n        }\n        if(displayname.length>10) {\n            setErrors({...errors, displayname: {message: \"Display name length must be at most 10.\", invalid:1}});\n            return false;\n\n        }\n        return true;\n    }\n\n    async function handleSubmit(event) {\n        event.preventDefault();\n        const username = event.target.username.value;\n        const password1 = event.target.password1.value;\n        const password2 = event.target.password2.value;\n        const displayname = event.target.displayname.value;\n        if(!isValid(username,password1,password2,displayname))\n            return;\n        // saving data\n        let pic_url = pic;\n        if (pic_url === '')\n            pic_url = defaultProfilePicture;\n        else {\n            pic_url = await getBase64();\n        }\n        const prefixToRemove = \"data:application/octet-stream;base64,\";\n        pic_url = pic_url.substring(prefixToRemove.length)\n        let newUser = {\n            username: username, password: password1, displayName: displayname, profilePic: pic_url\n        }\n        // post user to server\n        const res = await fetch('http://localhost:5000/api/Users', {\n            'method': 'post',\n            'headers' :{\n                'Content-Type': 'application/json',\n            },\n            'body':JSON.stringify(newUser)\n\n        })\n        // if(res.status===200) {\n        //     console.log('OK - post user');\n        // }\n        if(res.status!==200) {\n            setErrors({...errors, username: {message: \"Username already exists or picture too large.\", invalid:1}});\n            return;\n        }\n        // users[username] = newUser; - no need for this now.\n        navigate('/login',{replace:true});\n\n    }\n\n    //{label,name,id,errors,type,placeholder, checker}\n\n    return (\n        <>\n            <title>Sign up</title>\n            <link href=\"../login_signup.css\" rel=\"stylesheet\"/>\n            <div className=\"back-box\"/>\n            <div className=\"card login-box\">\n                <div className=\"card-body\">\n                    <Form className=\"\" onSubmit={handleSubmit}>\n                        <InputField label='Username' type='text' id='InputUsername2' placeholder='Enter username'\n                                    name='username' checker={changeFromEmpty} errors={errors}/>\n                        <InputField label='Password' type='password' id='InputPassword1' placeholder='Enter password'\n                                    name='password1'  checker = {checkPassword} errors = {errors} addValid={true}/>\n                        <InputField label='Verify password' type='password' id='InputPassword2' placeholder='Enter password again'\n                                    name='password2' checker={changeFromEmpty} errors={errors} />\n                        <InputField label='Display name' type='text' aria='DisplayNameHelp' placeholder='Enter display name'\n                                    name='displayname' checker={changeFromEmpty} errors={errors}\n                                    ariatext='This is the name you will appear by.' />\n                        {/*no component here, because of the logic*/}\n                        <Form.Group className=\"mb-3\">\n                            <Form.Label className=\"form-label\">\n                                Picture\n                            </Form.Label>\n                            <Form.Control className=\"form-control\" type=\"file\" id=\"formFile\"\n                                          onChange={showPic} name=\"image\" accept=\"image/*\"\n                            />\n                            {pic === '' &&\n                                <div id=\"formFile\" className=\"form-text text-muted\">\n                                    If no profile picture is provided a default picture will be used.\n                                </div>}\n                        </Form.Group>\n                        <div className=\"img-cont\">\n                            <img\n                                src={pic}\n                                id=\"Profile-Picture\"\n                                alt=\"Profile Picture\"\n                            />\n                        </div>\n                        <br/>\n                        {/*need to make it link to chat*/}\n                        <Button type=\"submit\" className=\"btn btn-primary\">\n                            Register\n                        </Button>\n                        <span className=\"sign-box\">\n          Already registered? <Link to=\"/login\">Click here</Link> to\n          login\n        </span>\n                    </Form>\n                </div>\n            </div>\n        </>\n\n    );\n}\n\nexport default Signup;","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/Chat_window.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/login_signup/signup/InputField.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/UserList.js",["68","69"],[],"import {User_preview} from \"./User_preview\";\nimport {userData} from \"./Chat\";\n\n\nfunction UserList({stateArray, clicker}) {\n    var userArray=[]\n    for(const property in stateArray) {\n        userArray.push(<User_preview lastMsg={stateArray[property].lastMsg} time={stateArray[property].time} profilePic={stateArray[property].profilePic}\n                                     displayName={stateArray[property].displayName} active={stateArray[property].active}\n                                        click={()=>clicker(property)} key={property}/>);\n    }\n    return (<ul id=\"user-list\">\n        {userArray}\n    </ul>)\n}\n\nexport default UserList;","/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/Message.js",[],[],"/Users/daniellifshitz/Documents/GitHub/WhatsappDesign/reactclient/src/chat/User_preview.js",[],[],{"ruleId":"70","severity":1,"message":"71","line":60,"column":7,"nodeType":"72","endLine":60,"endColumn":9,"suggestions":"73"},{"ruleId":"70","severity":1,"message":"74","line":73,"column":8,"nodeType":"72","endLine":73,"endColumn":16,"suggestions":"75"},{"ruleId":"76","severity":1,"message":"77","line":138,"column":15,"nodeType":"78","messageId":"79","endLine":138,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":310,"column":29,"nodeType":"82","endLine":312,"endColumn":83},{"ruleId":"83","severity":1,"message":"84","line":344,"column":21,"nodeType":"82","messageId":"85","endLine":345,"endColumn":22},{"ruleId":"86","severity":1,"message":"87","line":71,"column":31,"nodeType":"88","messageId":"89","endLine":71,"endColumn":32,"suggestions":"90"},{"ruleId":"86","severity":1,"message":"91","line":71,"column":48,"nodeType":"88","messageId":"89","endLine":71,"endColumn":49,"suggestions":"92"},{"ruleId":"80","severity":1,"message":"81","line":295,"column":29,"nodeType":"82","endLine":299,"endColumn":31},{"ruleId":"76","severity":1,"message":"93","line":2,"column":9,"nodeType":"78","messageId":"79","endLine":2,"endColumn":17},{"ruleId":"83","severity":1,"message":"94","line":8,"column":24,"nodeType":"82","messageId":"85","endLine":10,"endColumn":87},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUserChatsFromServer'. Either include it or remove the dependency array.","ArrayExpression",["95"],"React Hook useEffect has a missing dependency: 'getUserChatsFromServer'. Either include it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.",["96"],"no-unused-vars","'res' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component Chat_window must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["97","98"],"Unnecessary escape character: \\/.",["99","100"],"'userData' is defined but never used.","Imported JSX component User_preview must be in PascalCase or SCREAMING_SNAKE_CASE",{"desc":"101","fix":"102"},{"desc":"101","fix":"103"},{"messageId":"104","fix":"105","desc":"106"},{"messageId":"107","fix":"108","desc":"109"},{"messageId":"104","fix":"110","desc":"106"},{"messageId":"107","fix":"111","desc":"109"},"Update the dependencies array to be: [getUserChatsFromServer]",{"range":"112","text":"113"},{"range":"114","text":"113"},"removeEscape",{"range":"115","text":"116"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"117","text":"118"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"119","text":"116"},{"range":"120","text":"118"},[1847,1849],"[getUserChatsFromServer]",[2211,2219],[2324,2325],"",[2324,2324],"\\",[2341,2342],[2341,2341]]